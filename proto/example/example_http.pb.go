// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v1.0.2
// - protoc             v3.21.1
// source: proto/example/example.proto

package example

import (
	context "context"
	gin "github.com/gin-gonic/gin"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)

const _ = gin.Version

// 这里定义 handler interface
type ExampleHTTPHandler interface {
	Add(context.Context, *AddRequest) (*CommonResponse, error)
	Get(context.Context, *GetRequest) (*CommonResponse, error)
}

// RegisterExampleHTTPHandler define http router handle by gin.
// 注册路由 handler
func RegisterExampleHTTPHandler(g *gin.RouterGroup, srv ExampleHTTPHandler) {
	g.POST("/v1/add", _Example_Add0_HTTP_Handler(srv))
	g.GET("/v1/get", _Example_Get0_HTTP_Handler(srv))
}

// 定义 handler
// 遍历之前解析到所有 rpc 方法信息

func _Example_Add0_HTTP_Handler(srv ExampleHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(AddRequest)
			out = new(CommonResponse)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(400, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.Add(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(500, gin.H{"err": err.Error()})
			return
		}

		c.JSON(200, out)
	}
}

func _Example_Get0_HTTP_Handler(srv ExampleHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(GetRequest)
			out = new(CommonResponse)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(400, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.Get(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(500, gin.H{"err": err.Error()})
			return
		}

		c.JSON(200, out)
	}
}

// Client defines call remote server client and implement selector
type Client interface {
	Call(ctx context.Context, req, rsp interface{}) error
}

// ExampleHTTPClient defines call ExampleServer client
type ExampleHTTPClient interface {
	Add(context.Context, *AddRequest) (*CommonResponse, error)
	Get(context.Context, *GetRequest) (*CommonResponse, error)
}

// ExampleHTTPClientImpl implement ExampleHTTPClient
type ExampleHTTPClientImpl struct {
	cli Client
}

func NewExampleHTTPClient(cli Client) ExampleHTTPClient {
	return &ExampleHTTPClientImpl{
		cli: cli,
	}
}

func (c *ExampleHTTPClientImpl) Add(ctx context.Context, req *AddRequest) (resp *CommonResponse, err error) {
	resp = new(CommonResponse)
	err = c.cli.Call(ctx, req, resp)

	return
}

func (c *ExampleHTTPClientImpl) Get(ctx context.Context, req *GetRequest) (resp *CommonResponse, err error) {
	resp = new(CommonResponse)
	err = c.cli.Call(ctx, req, resp)

	return
}

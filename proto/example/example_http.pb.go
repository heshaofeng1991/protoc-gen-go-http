// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v1.0.0
// - protoc             v3.21.1
// source: proto/example/example.proto

package example

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = gin.SupportPackageIsVersion1

const OperationExampleAdd = "/example.Example/Add"
const OperationExampleGet = "/example.Example/Get"

type ExampleHTTPServer interface {
	Add(context.Context, *AddRequest) (*CommonResponse, error)
	Get(context.Context, *GetRequest) (*CommonResponse, error)
}

func RegisterExampleHTTPServer(s *http.Server, srv ExampleHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/add", _Example_Add0_HTTP_Handler(srv))
	r.GET("/v1/get", _Example_Get0_HTTP_Handler(srv))
}

func _Example_Add0_HTTP_Handler(srv ExampleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExampleAdd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Add(ctx, req.(*AddRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommonResponse)
		return ctx.Result(200, reply)
	}
}

func _Example_Get0_HTTP_Handler(srv ExampleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExampleGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*GetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommonResponse)
		return ctx.Result(200, reply)
	}
}

type ExampleHTTPClient interface {
	Add(ctx context.Context, req *AddRequest, opts ...http.CallOption) (rsp *CommonResponse, err error)
	Get(ctx context.Context, req *GetRequest, opts ...http.CallOption) (rsp *CommonResponse, err error)
}

type ExampleHTTPClientImpl struct {
	cc *http.Client
}

func NewExampleHTTPClient(client *http.Client) ExampleHTTPClient {
	return &ExampleHTTPClientImpl{client}
}

func (c *ExampleHTTPClientImpl) Add(ctx context.Context, in *AddRequest, opts ...http.CallOption) (*CommonResponse, error) {
	var out CommonResponse
	pattern := "/v1/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationExampleAdd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ExampleHTTPClientImpl) Get(ctx context.Context, in *GetRequest, opts ...http.CallOption) (*CommonResponse, error) {
	var out CommonResponse
	pattern := "/v1/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationExampleGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
